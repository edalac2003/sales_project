@page "/states/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if(state == null)
{
    <div class="align-items-center">
        <img src="https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif?20151024034921" />
    </div>
}
else
{
    <div class="container-fluid mt-3">
        <div class="row align-items-start">
            <div class="col-md-10">
                <h3>@state.Name</h3>
            </div>
            <div class="col" al>
                <div class="mb-2">
                    <a class="btn btn-primary" href="/cities/create/@state.Id">Nueva ciudad</a>
                </div>
            </div>
        </div>
    </div>
    
    <GenericList MyList="state.Cities!.ToList()">
        <Body>
            <div class="m-4">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th width="80%">Ciudades</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var city in state.Cities!)
                        {
                            <tr>
                                <td>
                                    @city.Name
                                </td>
                                <td>
                                    <a class="btn btn-warning" href="/cities/edit/@city.Id">Editar</a>
                                    <button class="btn btn-danger" @onclick=@(() => DeleteAsync(city.Id))>Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>            
        </Body>
    </GenericList>
    <div class="mt-2">
        <a class="btn btn-success" href="/countries/details/@state.CountryId">Regresar</a>
    </div>
}

@code {
    private Country country = null!;
    private State? state;
    private StateForm? stateForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.GetAsync<State>($"/api/states/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries/details/" + Id);
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        state = responseHttp.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/cities/{id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Ciudad eliminada con éxito.");
    }


    private void Return()
    {
        navigationManager.NavigateTo("/countries/details/" + Id);
    }
}
