@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <div class="align-items-center">
        <img src="https://upload.wikimedia.org/wikipedia/commons/b/b1/Loading_icon.gif?20151024034921" />
    </div>
}
else
{
    <div class="row align-items-start">
        <div class="col-md-9">
            <h3>@country.Name</h3>
        </div>
        <div class="col" al>
            <div class="mb-3">
                <a class="btn btn-primary" href="/states/create/@country.Id">Nuevo Estado/Departamento</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-4">
                <input style="width: 98%;" type="text" class="form-control" id="titulo" placeholder="Buscar estado. . ." @bind-value="Filter" />
            </div>
            <div class="col-6 ml-4">
                <div>
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
                </div>
                <div class="m-2">
                </div>
            </div>
        </div>
    </div>

    <GenericList MyList="states!">
        <Body>
            <div class="m-4">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Estado / Departamento</th>
                            <th>Ciudades</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var state in states!)
                        {
                            <tr>
                                <td width="60%">@state.Name</td>
                                <td width="15%">@state.CitiesNumber</td>
                                <td>
                                    <a class="btn btn-warning" href="/states/edit/@state.Id">Editar</a>
                                    <a class="btn btn-info" href="/states/details/@state.Id">Detalles</a>
                                    <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))>Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>            
        </Body>
    </GenericList>
    <div class="container-fluid" ml-3 mr-3>
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-8">
                <Pagination CurrentPage="currentPage" SelectedPage="SelectedPage" TotalPages="totalPages"></Pagination>
            </div>
            <div class="col-md-auto"></div>
        </div>
    </div>

    <div class="m-3">
        <a class="btn btn-success" href="/countries">Regresar</a>
    </div>
}


@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTotalPagesAsync();
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?Id={Id}&page={page}";
            url2 = $"api/states/totalPages";
        }
        else
        {
            url1 = $"api/states?Id={Id}&page={page}&Filter={Filter}";
            url2 = $"api/states/totalPages?Filter={Filter}";
        }

        var responseHttp1 = await repository.GetAsync<Country>($"api/countries/{Id}");
        var responseHttp2 = await repository.GetAsync<List<State>>(url1);
        var responseHttp3 = await repository.GetAsync<int>(url2);
        country = responseHttp1.Response;
        states = responseHttp2.Response;
        totalPages = responseHttp3.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.DeleteAsync($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadTotalPagesAsync()
    {
        var url = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url = $"api/categories/totalPages";
        }
        else
        {
            url = $"api/categories/totalPages?Filter={Filter}";
        }

        var responseHppt = await repository.GetAsync<int>(url);
        totalPages = responseHppt.Response!;
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadTotalPagesAsync();
        await LoadAsync(page);
        await SelectedPage(page);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }
}