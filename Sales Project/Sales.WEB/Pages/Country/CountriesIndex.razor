@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<div class="container-fluid mt-3 mb-3">
    <div class="row align-items-start">
        <div class="col-md-10">
            <h3>Paises</h3>
        </div>
        <div class="col" al>
            <div class="mb-3">
                <a class="btn btn-primary" href="/countries/create">Nuevo País</a>
            </div>
        </div>
    </div>
</div>


<GenericList MyList="countries">
    <Body>
        <div class="m-4">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th width="50%" style="align" >País</th>
                        <th width="25%">Estados/Departamentos</th>
                        <th width="25%"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var country in countries!)
                    {
                        <tr>
                            <td width="50%">@country.Name</td>
                            <td width="25%"></td>
                            <td width="25%">
                                <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                                <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>        
    </Body>
</GenericList>
<div class="container-fluid" ml-3 mr-3>
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <Pagination CurrentPage="currentPage" SelectedPage="SelectedPage" TotalPages="totalPages"></Pagination>
        </div>
        <div class="col-md-2"></div>
    </div>
</div>


@code {
    public List<Country>? countries;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTotalPagesAsync();
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadTotalPagesAsync()
    {
        var url = "api/countries/GetPages";
        //if (string.IsNullOrEmpty(Filter))
        //{
        //    url = "api/countries/GetPages";
        //}
        //else
        //{
        //    url = $"api/countries/GetPages?filter={Filter}";
        //}

        var responseHppt = await repository.GetAsync<int>(url);
        totalPages = responseHppt.Response!;
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        var url = $"api/countries?page={page}";
        //if (string.IsNullOrEmpty(Filter))
        //{
        //    url = $"api/countries?page={page}";
        //}
        //else
        //{
        //    url = $"api/countries?page={page}&filter={Filter}";
        //}

        var httpResponse = await repository.GetAsync<List<Country>>(url);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        countries = httpResponse.Response;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/countries/{id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync();
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = false,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "País eliminado con éxito.");
    }
}
