@page "/categories"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<div class="row align-items-start">
    <div class="col-md-10">
        <h3>Categorías</h3>
    </div>
    <div class="col" al>
        <div class="mb-3">
            <a class="btn btn-primary" href="/category/create">Nueva Categoria</a>
        </div>
    </div>
</div>

<GenericList MyList="categories">
    <Body>
        <div class="m-3">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th width="70%">Categoría</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories!)
                    {
                        <tr>
                            <td>@category.Name</td>
                            <td>
                                <a href="/categories/edit/@category.Id" class="btn btn-warning">Editar</a>
                                <a href="/categories/details/@category.Id" class="btn btn-info">Detalles</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </Body>
</GenericList>

@code {
    public List<Category>? categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var httpResponse = await repository.GetAsync<List<Category>>("/api/categories");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categories = httpResponse.Response;
    }

    private void DeleteAsync(int id)
    {
        
    }
}
